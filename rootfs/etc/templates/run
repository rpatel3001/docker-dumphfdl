#!/usr/bin/with-contenv bash
#shellcheck shell=bash

# Require that acars_server is running
if ! netstat -an | grep -P '^\s*tcp\s+\d+\s+\d+\s+0\.0\.0\.0:15555\s+(?>\d{1,3}\.{0,1}){4}:\*\s+LISTEN\s*$' > /dev/null; then
  sleep 1
  if [[ ! ${QUIET_LOGS,,} =~ true ]]; then
    echo "[dumpvdl2] vdlm_server not running, exiting"
  fi
  exit
fi
set -e

VDLM_BIN="/usr/local/bin/dumpvdl2"
DEVICE_ID=""
# shellcheck disable=SC2001
FREQ_STRING=""
VDLM_CMD=()

# Specify device ID
if [ -n "${DEVICE_ID}" ]; then
	VDLM_CMD+=("--rtlsdr" "$DEVICE_ID")
fi

if [ -z "$GAIN" ]; then
    GAIN="40"
fi

if [ -n "${PPM}" ]; then
	VDLM_CMD+=("--correction" "$PPM")
fi

VDLM_CMD+=("--gain" "$GAIN")

# Send output JSON to vdlm2_server.
if [[ ${VDLM_FILTER_ENABLE,,} =~ true ]]; then
  VDLM_CMD+=("--msg-filter" "all,-avlc_s,-acars_nodata,-x25_control,-idrp_keepalive,-esis")
fi

VDLM_CMD+=("--station-id=$FEED_ID" "--output" "decoded:json:udp:address=127.0.0.1,port=5555")

if [[ -n "$ZMQ_MODE" ]]; then
  if [[ -n "$ZMQ_ENDPOINT" ]]; then
    VDLM_CMD+=("--output" "decoded:json:zmq:mode=${ZMQ_MODE,,},endpoint=${ZMQ_ENDPOINT}")
  fi
fi

# if [ -z "${QUIET_MESSAGES}" ]; then
#   VDLM_CMD+=("--output" "decoded:text:file:path=-")
# fi

# if [ -n "${PLANEPLOTTER}" ]; then
# 	VDLM_CMD+=("--output" "decoded:pp_acars:udp:address=127.0.0.1,port=4444")

# 	if ! netstat -an | grep -P '^\s*tcp\s+\d+\s+\d+\s+0\.0\.0\.0:14444\s+(?>\d{1,3}\.{0,1}){4}:\*\s+LISTEN\s*$' > /dev/null; then
#       if [ -z "${QUIET_LOGS}" ]; then
#         # shellcheck disable=SC2016
#         echo "Waiting for planeplotter_server" | stdbuf -oL awk '{print "[dumpvdl2] " strftime("%Y/%m/%d %H:%M:%S", systime()) " " $0}'
#       fi
#       sleep 1
#       exit
# 	fi
#     if [ -z "${QUIET_LOGS}" ]; then
#       # shellcheck disable=SC2016
#       echo "planeplotter_server ready, starting service" | stdbuf -oL awk '{print "[dumpvdl2] " strftime("%Y/%m/%d %H:%M:%S", systime()) " " $0}'
#     fi
# fi

# shellcheck disable=SC2206
VDLM_CMD+=($FREQ_STRING)

echo "[dumpvdl2] Starting: '$VDLM_BIN" "${VDLM_CMD[*]}'"

set -eo pipefail

if [[ ${QUIET_LOGS,,} =~ true ]]; then
# shellcheck disable=SC2016
  "$VDLM_BIN" "${VDLM_CMD[@]}" 2>&1 | \
  stdbuf -oL sed --unbuffered '/^$/d' | \
  stdbuf -oL awk '! /^dumpvdl2/' | \
  stdbuf -oL awk '! /^Sampling rate set/' | \
  stdbuf -oL awk '! /^Found \[0-9]+ device(s):/' | \
  stdbuf -oL awk '! /^  [0-9]+/' | \
  stdbuf -oL awk '! /^Using device [0-9]+/' | \
  stdbuf -oL awk '! /^Found /' | \
  stdbuf -oL awk '! /^Exact sample rate /' | \
  stdbuf -oL awk '! /^Setting sample rate/' | \
  stdbuf -oL awk '! /PLL not locked!$/' | \
  stdbuf -oL awk '! /^Center frequency set/' | \
  stdbuf -oL awk '! /^Device [#]?[0-9]+/' | \
  stdbuf -oL awk '! /^Allocating [0-9]+ zero-copy buffers/' | \
  stdbuf -oL awk '{print "[dumpvdl2] " strftime("%Y/%m/%d %H:%M:%S", systime()) " " $0}'
else
  # shellcheck disable=SC2016
  "$VDLM_BIN" "${VDLM_CMD[@]}" 2>&1 | \
  stdbuf -oL sed --unbuffered '/^$/d' | \
  stdbuf -oL awk '{print "[dumpvdl2] " strftime("%Y/%m/%d %H:%M:%S", systime()) " " $0}'
fi

# if we've ended up here there is a problem!
echo "[dumpvdl2] Exiting with error"
sleep 5
exit 1
